package com.green.medi.service.impl;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.HashMap;
import java.util.Map;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.green.medi.service.IKakaoLoginService;

@Service
public class KakaoLoginServiceImpl implements IKakaoLoginService {

	@Override
	public String getAccessToken(String authorize_code) throws Exception {
		
		String access_Token = "";
		String refresh_Token = "";
		String reqURL = "https://kauth.kakao.com/oauth/token";
		
		try {
			URL url  =  new URL(reqURL);
			
			HttpURLConnection  conn  =  (HttpURLConnection) url.openConnection();
			
			conn.setRequestMethod("POST"); 
			conn.setDoOutput(true);
			
			BufferedWriter  bw  =  new BufferedWriter(new OutputStreamWriter(conn.getOutputStream()));
			StringBuilder   sb  =  new StringBuilder();
			
			sb.append("grant_type=authorization_code");
			
			sb.append("&client_id=619f9f37acd1078571fbd135e208036c"); // REST API 
			
			sb.append("&redirect_url=http://localhost:8080/oauth/kakao"); // ReDIRECT_URI
			
			sb.append("&code=" + authorize_code);
			bw.write(sb.toString());
			bw.flush();
			
			int responseCode  =  conn.getResponseCode();
			System.out.println("responseCode : " + responseCode);
			
			BufferedReader br  =  new  BufferedReader(new InputStreamReader(conn.getInputStream()));
			String line    =  "";
			String result  =  "";
			
			while ((line  =  br.readLine()) != null) {
				result += line;
			}
			System.out.println("response body : " + result);
			
			ObjectMapper  objectMapper  =  new ObjectMapper();
			
			Map<String, Object> jsonMap  =  objectMapper.readValue(result, new TypeReference<Map<String, Object>>() {
			});
			
			access_Token  =  jsonMap.get("access_Token").toString();
			refresh_Token  =  jsonMap.get("refresh_Token").toString();
			
			System.out.println("access_Token : " + access_Token);
			System.out.println("refresh_Token : " + refresh_Token);
			
			br.close();
			bw.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		return access_Token;
	}
	
	@SuppressWarnings("unchecked")
	@Override
	public HashMap<String, Object> getUserInfo(String access_Token) throws Throwable {
		
		HashMap<String, Object> userInfo  =  new HashMap<String, Object>();
		
		String reqURL = "https://kapi.kakao.com/v2/user/me";
		
		try {
			URL url  =  new URL(reqURL);
			HttpURLConnection conn  =  (HttpURLConnection) url.openConnection();
			
			conn.setRequestMethod("GET");
			
			conn.setRequestProperty("Authorization", "Bearer" + access_Token);
			
			int responseCode  =  conn.getResponseCode();
			System.out.println("responseCode : " + responseCode);
			
			BufferedReader  br  =  new BufferedReader(new InputStreamReader(conn.getInputStream()));
			
			String line  =  "";
			String result  =  "";
			
			while ((line  =  br.readLine()) != null) {
				result += line;
			}
			System.out.println("response body : " + result);
			System.out.println("result type" + result.getClass().getName()); // java.lang.String
			
			try {
				ObjectMapper objectMapper  =  new ObjectMapper();
				
				Map<String, Object> jsonMap  =  objectMapper.readValue(result, new TypeReference<Map<String, Object>>(){
					
				});
				
				System.out.println(jsonMap.get("properties"));
				
				Map<String, Object> properties     =  (Map<String, Object>) jsonMap.get("properties");
				Map<String, Object> kakao_account  =  (Map<String, Object>) jsonMap.get("kakao_account");
				
				
				
				String nickname = properties.get("nickname").toString();
				String email = kakao_account.get("email").toString();
				
				userInfo.put("nickname", nickname);
				userInfo.put("email", email);
			} catch (Exception e) {
				e.printStackTrace();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
		
		return userInfo;
	}

}
